? wx
? config.log
? config.h
? config.cache
? config.status
? Makefile
? bochs
? msg
? bximage
? t
? test2
? bochsout.txt
? patch
? bios/Makefile
? cpu/Makefile
? debug/Makefile
? disasm/Makefile
? dynamic/Makefile
? fpu/Makefile
? gui/Makefile
? instrument/stubs/Makefile
? iodev/Makefile
? memory/Makefile
? misc/Makefile
Index: gui/wx.cc
===================================================================
RCS file: /cvsroot/bochs/bochs/gui/Attic/wx.cc,v
retrieving revision 1.1.2.14
diff -u -r1.1.2.14 wx.cc
--- gui/wx.cc	14 Mar 2002 15:13:45 -0000	1.1.2.14
+++ gui/wx.cc	14 Mar 2002 22:35:42 -0000
@@ -53,6 +53,7 @@
   EVT_MENU(ID_ReadConfig, MyFrame::HandleEvent)
   EVT_MENU(ID_WriteConfig, MyFrame::HandleEvent)
   EVT_MENU(ID_WriteConfigAs, MyFrame::HandleEvent)
+  EVT_MENU(ID_EventFromBochs, MyFrame::ProcessBochsEvent2)
 END_EVENT_TABLE()
 
   // event table for MyPanel
@@ -176,19 +177,38 @@
 MyFrame::ProcessBochsEvent (void *class_ptr, int id)
 {
   printf ("MyFrame::ProcessBochsEvent\n");
+  wxThread *thread = wxThread::This ();
+  printf ("My thread is %p\n", thread);
+  if (class_ptr == NULL) {
+    // this might happen if some event appears before set_notify_callback
+    // is used.
+    printf ("Ignoring bochs event because class ptr is undefined.\n");
+  }
+  // make an event and post it to the MyFrame object
+  wxCommandEvent event (wxEVT_COMMAND_MENU_SELECTED, ID_EventFromBochs);
+  event.SetInt (id);
+  printf ("Posting event to the MyFrame\n");
+  wxPostEvent ((MyFrame *)class_ptr, event);
+  wxYield ();
+  /*
+  // call the event handler code
   MyFrame *f = (MyFrame *)class_ptr;
   f->ProcessBochsEvent2 (id);
+  */
   return 0;
 }
 
-int 
-MyFrame::ProcessBochsEvent2 (int code)
+void 
+MyFrame::ProcessBochsEvent2 (wxCommandEvent& event)
 {
   printf ("MyFrame::ProcessBochsEvent2\n");
+  wxThread *thread = wxThread::This ();
+  printf ("My thread is %p\n", thread);
+  int code = event.GetInt ();
   switch (code)
   {
   case NOTIFY_CODE_LOGMSG:
-    if (0) {
+    if (1) {
       // dumb static choices for now, I'll fix it once I get it to work
       //
       // this code works if the gui thread calls it, but it's doing bad
@@ -203,7 +223,7 @@
       // Maybe this must be resolved by posting a message between threads
       // instead.
 
-      wxMutexGuiEnter();
+      //wxMutexGuiEnter();
       static wxString choices[] = { "Die", "Continue", "Continue and Disable" };
       char prefix[512], msg[512];
       int level;
@@ -213,7 +233,7 @@
       int choice = ::wxGetSingleChoiceIndex (
 	  string,
 	  wxString (SIM->get_log_level_name (level)), 3, choices);
-      wxMutexGuiLeave();
+      //wxMutexGuiLeave();
       printf ("you chose %d\n", choice);
     } else {
   //////////// temporary! still implement this with stdin/stdout ///////////
@@ -234,8 +254,10 @@
       char *log_action_ask_choices[] = { "cont", "alwayscont", "die" };
       int log_action_n_choices = 3;
       if (ask_menu ("Choose cont, alwayscont, or die. [%s] ", 3,  
-	    log_action_ask_choices, 2, &choice) < 0) 
-	return SIM->notify_return(-1);
+	    log_action_ask_choices, 2, &choice) < 0)  {
+	SIM->notify_return(-1);
+        return;
+      }
       // return 0 for continue, 1 for alwayscontinue, 2 for die.
       SIM->notify_return(choice);
     }
Index: gui/wx.h
===================================================================
RCS file: /cvsroot/bochs/bochs/gui/Attic/wx.h,v
retrieving revision 1.1.2.3
diff -u -r1.1.2.3 wx.h
--- gui/wx.h	28 Jun 2001 04:08:56 -0000	1.1.2.3
+++ gui/wx.h	14 Mar 2002 22:35:42 -0000
@@ -20,6 +20,7 @@
   ID_Choice1,
   ID_Combo1,
   ID_Text1,
+  ID_EventFromBochs,
   ID_LAST_STATIC_ASSIGNED_ID
 };
 
@@ -52,7 +53,7 @@
   int ReadConfiguration (int ask_name);
   int WriteConfiguration (int ask_name);
   static int ProcessBochsEvent (void *class_ptr, int id);
-  int ProcessBochsEvent2 (int id);
+  void ProcessBochsEvent2 (wxCommandEvent& event);
 };
 
 class MyPanel: public wxScrolledWindow
