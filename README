--------------------------------------------------------------------
SMP-bochs
Bochs pentium simulator, hacked to simulate a multiprocessor system
Updated Fri Mar 30 21:01:51 EST 2001
Bryce Denney  (bryce.denney@bigfoot.com)
--------------------------------------------------------------------

What is this?
- This is Kevin Lawton's Bochs pentium simulator, modified during the last week
  by me to simulate several processors instead of one.  The starting point was
  the 3/25/2000 snapshot from ftp.bochs.com.  My goal was to boot up Linux with
  multiprocessor support, and it has reached that goal as of yesterday.
- I have implemented a number of features required for Linux SMP, including
  RDTSC instruction, local APIC on each processor, and one I/O APIC.
- I modified the rombios.c file to add a data structure called the Intel
  Multiprocessor Configuration.  An SMP-aware operating system such as Linux
  probes BIOS memory to find the structure, which contains information about
  how many processors, their IDs, interrupt sources, etc.
- I've made some minor additions to the debugger, such as an "info idt" command 
  that prints the Interrupt Descriptor Table in a readable form.  The debugger
  can also use the readline library if set USE_READLINE=1.
- Bochs is released under LGPL, so my changes are as well.

What is this NOT?
- Do not expect this code to give you better performance than the standard 
  bochs.  On the contrary, it has to spend time simulating idle processors as
  well as the ones doing your task.  My point was to simulate an SMP system,
  not to speed up the completion of your simulated applications!
- It is not well tested.  I have booted Linux several times and typed a few
  commands, but that's it so far.  I'm making it public early so that people
  can take a look and try it out.
- I recommend getting Linux under Bochs working first with the 03-25-2000 
  release, before messing around with SMP.
- I have no idea if other operating systems will notice the other processors, 
  or even boot up.  They should be able to find the MP configuration structure,
  but who knows?

Here's how to get your own SMP Linux bochs running.  First run the configure script.

  ./configure --enable-cpu-level=6 --enable-fpu

or if you want the debugger, try this:

  ./configure --enable-cpu-level=6 --enable-fpu --enable-debugger --enable-disasm

By default, I've set up config.h.in to create a 2-processor system.  See the
preprocessor variable BX_SMP_PROCESSORS to change it around.  For each 
configuration of processors, in general you'll need to compile a new 
BIOS (bios/rombios.bin).  I've included a few in the bios directory to save the 
trouble.

The default configuration is:
  BX_SMP_PROCESSORS=2         (in config.h)
  BX_BOOTSTRAP_PROCESSOR=0    (in config.h)
  BX_IOAPIC_DEFAULT_ID=2      (in config.h)
  romimage: file=bios/BIOS-bochs-2-processors, address=0xf0000       (in .bochsrc)

A 4-processor configuration that should work is:
  BX_SMP_PROCESSORS=4         (in config.h)
  BX_BOOTSTRAP_PROCESSOR=2    (in config.h)
  BX_IOAPIC_DEFAULT_ID=4      (in config.h)
  romimage: file=bios/BIOS-bochs-4-processors, address=0xf0000       (in .bochsrc)

Or a single-processor machine:
  BX_SMP_PROCESSORS=1         (in config.h)
  BX_BOOTSTRAP_PROCESSOR=0    (in config.h)
  BX_IOAPIC_DEFAULT_ID=1      (in config.h)
  romimage: file=bios/BIOS-bochs-990925a, address=0xf0000       (in .bochsrc)

When all this configuration is done, do a "make" to build it.  Then edit the
.bochsrc file to point to your floppy image and/or hard disk image.  And
run it!  If you compile with debugger, you'll have to type "c <return>" before
bochs will start.

Refer to docs-html/* for normal Bochs setup questions.  For anything else related
to Bochs or SMP, please write to bryce.denney@bigfoot.com.  I'll be interested
to hear if anyone gets it going.


And the biggest question of all: WHY?

First it must be said that Bochs is an amazing achievement as-is.  The IA32 
architecture has grown into such a tangled mess and I'm MOST IMPRESSED with
Kevin's accuracy in simulating it, and coming up with device models that allow
you to boot Win, Unix, etc.

I have been interested in learning about how the Linux kernel works: memory
management, task switching, system calls, interrupt handlers, etc.  For this,
the ability to single-step through the kernel without bringing down your host
machine and refer to the kernel source is a powerful tool.  Then, for some
work projects I'm learning all I can about multiprocessor techniques.  I don't
have a SMP machine to play with, and even if I did it wouldn't be possible to
watch the APICs, spin locks, and task switching in real time.  

So now we have an SMP machine to tinker with.  I hope to compile some
multi-threaded benchmark code to see how tasks are assigned to different CPUs.
The APIC models still need some work (timer doesn't count, no task priority,
etc.) and it doesn't compile with BX_APIC_SUPPORT turned off.  There's
certainly room for improvement.

From the limited activity on the bochs-developer list at Red Hat and the
sourceforge project with 2 members, it looks like only a handful of people are
actually working on bochs (which I think is a shame).  I would be interested to
talk with those people to see how I could help out.  I've tried to keep these
SMP-related changes done in a way that can be enabled/disabled by preprocessor
defines like everything else.  For this release, I'm sure it won't compile clean
with some combinations of options, but I will work on cleaning it up again.
Let me know what I've broken.  A log of my changes is in CHANGES.bbd.  

Have fun!
Bryce Denney

-----------What follows is the original README-----------
Hello,

All documentation is now located in the docs-html directory.

Just point you Web browser at Bochs.html.  For example:

  netscape docs-html/index.html

Please read the file 'LICENSE' for information about the
license associated with this software.

-Kevin Lawton
