Readme for BRANCH-cpanel branch
updated Thu Mar 14 16:51:10  2002
Bryce Denney

wxWindows Configuration Interface

This branch began in June 2001 when the most recent bochs version was
1.2.1.  Dave Poirier and Bryce Denney started adding a wxWindows 
configuration interface.  So far, it uses the platform's native
interface to show the vga screen and the traditional bitmap buttons.
The wxWindows window is a separate window, and eventually it will let
you choose between different configurations, manage all the bochsrc options,
create new disk images (?), and then start a simulation.

Right now, the wxWindows window appears first.  This will be where
you can choose a preset configuration or create one from scratch, then
edit the bochsrc options using the GUI.  Then, by clicking on some button or a
menu option, you can start up the Bochs simulation.  For now, the simulation
creates its own window for vga display and the traditional buttons, which
still use the platform-dependent gui code (not wxwindows).

WARNING: Don't expect stable or complete code yet!

I have tested in linux, where a "configure;make" should work fine.
More recently, I have been developing in MSVC++ using projects and 
workspaces.  To build in VC++:

- in cygwin, do "sh .conf.win32-vcpp".  If you want different configure
  options from the default, edit .conf.win32-vcpp first.
- in cygwin, do "unzip build/win32/workspace.zip", or use winzip.  Now
  you should have bochs.dsw and bochs.dsp in the main directory.
- open up bochs.dsw, the workspace file.
- edit project settings so that VC++ can find the wxWindows include
  files and libraries on your system.  I installed them in
  d:/wx/wx232/include and d:/wx/wx232/lib.  Specifically, edit
  - Project>Settings>C/C++>Preprocessor: include directories.
  - Project>Settings>Link>Input: additional library path.
- build

Note that the project is set up for wxWindows 2.3.2, and the only 
configuration that I've used is called Win32 Debug.  To use on 
other wxwindows versions, you will have to change some of the names
of the libraries to include.  Use the samples that came with that
version of wxwindows for reference.

What works right now:
- cd to a directory with a bochsrc and disk images in it (I use dlxlinux)
- start up bochs.  You get a small wxwindows window with a File menu.
- choose "start bochs" on the file menu.
- a new window pops up with is the normal bochs window
- click on the floppy icon for A or B.  You get a modal dialog box from
  the control panel that lets you choose a new image file name.  Click
  the new image file, and ok.  Now you can read the new image file in
  Bochs.  If the file you select or type is readable, the floppy icon shows a
  good floppy disk.  If you type "none" or choose an unreadable file,
  the floopy icon will show a disk with an X through it.
- That's all.  Nothing else works except for quit.


-------------------------------------------------------------
Bochs x86 Pentium Emulator
Upated: Tue Jun 12 13:54:43 EDT 2001
Version: 1.2.1

WHAT IS BOCHS?

Bochs is a highly portable open source IA-32 (x86) PC emulator
written in C++, that runs on most popular platforms.  It includes
emulation of the Intel x86 CPU, common I/O devices, and a custom
BIOS.  Currently, bochs can be compiled to emulate a 386, 486 or
Pentium CPU.  Bochs is capable of running most Operating Systems
inside the emulation including Linux, Windows 95, DOS, and 
Windows NT 4.  Bochs was written by Kevin Lawton and is currently 
maintained by the Bochs project at "http://bochs.sourceforge.net".

Bochs can be compiled and used in a variety of modes, some which are
still in development.  The 'typical' use of bochs is to provide
complete x86 PC emulation, including the x86 processor, hardware
devices, and memory.  This allows you to run OS's and software within
the emulator on your workstation, much like you have a machine
inside of a machine.  Bochs will allow you to run Win '95
applications on a Solaris machine with X11, for example.

Bochs is distributed under the GNU LGPL.  See COPYING for details.

GETTING CURRENT SOURCE CODE 

Source code for Bochs is available from the Bochs home page at
http://bochs.sourceforge.net.  You can download the most recent
release, use CVS to get the latest sources, or grab a CVS
snapshot which is updated nightly.  The releases contain the most
stable code, but if you want the very newest features try the
CVS version instead. 

COMPILING BOCHS FROM SOURCES

All releases are gzip'd tar files.  That means the whole Bochs source
code directory has been consolidated into one file using the Unix
command 'tar', then compressed to save space with GNU 'gzip'.  To
extract the source code, you'll need both 'tar' and 'gzip/gunzip'.
All files are contained within one subdirectory named 'bochs-[VERSION]'. 

cd /path/parent-directory
gzip -dc bochs-[VERSION].tar.gz | tar -xvf -
cd bochs-[VERSION]

Before compiling, you'll need to run the configure script, which
will configure source code to run on your system, and with your
chosen options.  There are many options to 'configure', and you
probably don't need any of them.  If you run BeOS, specify
'--with-beos' to configure.  To see a complete list: 

unix-> ./configure --help

For more complete documentation of options available to configure,
look at docs-html/configure.html in your browser.

If configure cannot guess your compiler and compiler arguments,
you will also need to set environment variables to tell configure
what compiler and options to use.  The relevant environment variables 
are CC and CXX (C and C++ compiler), CFLAGS and CXXFLAGS (options
for the C and C++ compiler).

Now run configure, be it manually or by way of a script file. 

unix-> ./configure
-or-
unix-> ./.conf.x86

If the configure script bombs, check 'config.log'. Specifically,
look for errors returned by the compiler.  You may have options
incompatible with your compiler.  See the link on setting the
environment variables above. 

Assuming at this point all went well with the configure command,
edit the file 'config.h', which was generated by ./configure.  Look
for the USER CONFIGURABLE OPTIONS section.  Each parameter available
for editing is documented.  Generally the defaults are fine for
typical users.  Please read about each parameter and edit carefully.
NOTE: This file is generated, and will be deleted if you run 'make
dist-clean'. 

You may now compile the source. 

unix-> make

WHERE ARE THE DOCS?

You have a local copy of the Bochs documentation in docs-html that
came out of the TAR file.  (Point your browser to
docs-html/index.html.)  These same docs are also on the web at
http://bochs.sourceforge.net/docs-html.  If you followed the compile
directions above, the next step is "Setting up the environment
before running" under Compile/Install.

WHERE CAN I GET MORE INFORMATION?  HOW DO I REPORT PROBLEMS?

Both the docs-html and the Bochs website have instructions on how 
to join the bochs-developers mailing list, which is the primary
forum for discussion of Bochs.  The main page of the website also
has links to bug reports and feature requests.  You can browse and
add to the content in these areas even if you do not have a (free)
SourceForge account.  We need your feedback so that we know what
parts of Bochs to improve.  

There is a patches section on the web site too, if you have made
some changes to Bochs that you want to share.

HOW CAN I HELP?

If you would like contribute to the Bochs project, a good first step
is to join the bochs-developers mailing list, and read the archive
of recent messages to see what's going on.  

If you are a technical person (can follow hardware specs, can write
C/C++) take a look at the list of open bug reports and feature
requests to see if you are interested in working on any of the
problems that are mentioned in them.  If you check out the CVS
sources, make some changes, and create a patch, one of the
developers will be very happy to apply it for you.  Developers who
frequently submit patches, or who embark on major changes in the
source can get write access to CVS.  Be sure to communicate with the
bochs-developers list to avoid several people working on the same
thing without realizing it.

If you are a Bochs user, not a hardware/C++ guru, there are still
many ways you could help out.  We have a group of people working on
making win32 binary releases, and building up a set of useful tools
to include in those releases.  Others are writing documentation or
cleaning up the existing documentation.  Others are testing out
Bochs on every imaginable operating system and writing about how
they did it.
