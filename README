Readme for BRANCH-cpanel branch
updated Sun Mar 17 01:08:40  2002
Bryce Denney

-------------
Mar 17: This code now has all the changes from the main branch up to
the latest release 1.4.pre2.
-------------

wxWindows Configuration Interface

This branch began in June 2001 when the most recent bochs version was
1.2.1.  Dave Poirier and Bryce Denney started adding a wxWindows 
configuration interface.  So far, it uses the platform's native
interface to show the vga screen and the traditional bitmap buttons.
The wxWindows window is a separate window, and eventually it will let
you choose between different configurations, manage all the bochsrc options,
create new disk images (?), and then start a simulation.

Right now, the wxWindows window appears first.  This will be where
you can choose a preset configuration or create one from scratch, then
edit the bochsrc options using the GUI.  Then, by clicking on some button or a
menu option, you can start up the Bochs simulation.  For now, the simulation
creates its own window for vga display and the traditional buttons, which
still use the platform-dependent gui code (not wxwindows).

WARNING: Don't expect stable or complete code yet!

I have tested in linux, where a "configure;make" should work fine.
More recently, I have been developing in MSVC++ using projects and 
workspaces.  To build in VC++:

- in cygwin, do "sh .conf.win32-vcpp".  If you want different configure
  options from the default, edit .conf.win32-vcpp first.
- in cygwin, do "unzip build/win32/workspace.zip", or use winzip.  Now
  you should have bochs.dsw and bochs.dsp in the main directory.
- open up bochs.dsw, the workspace file.
- edit project settings so that VC++ can find the wxWindows include
  files and libraries on your system.  I installed them in
  d:/wx/wx232/include and d:/wx/wx232/lib.  Specifically, edit
  - Project>Settings>C/C++>Preprocessor: include directories.
  - Project>Settings>Link>Input: additional library path.
- build

Note that the project is set up for wxWindows 2.3.2, and the only 
configuration that I've used is called Win32 Debug.  To use on 
other wxwindows versions, you will have to change some of the names
of the libraries to include.  Use the samples that came with that
version of wxwindows for reference.

What works right now:
- cd to a directory with a bochsrc and disk images in it (I use dlxlinux)
- start up bochs.  You get a small wxwindows window with a File menu.
- choose "start bochs" on the file menu.
- a new window pops up with is the normal bochs window
- click on the floppy icon for A or B.  You get a modal dialog box from
  the control panel that lets you choose a new image file name.  Click
  the new image file, and ok.  Now you can read the new image file in
  Bochs.  If the file you select or type is readable, the floppy icon shows a
  good floppy disk.  If you type "none" or choose an unreadable file,
  the floopy icon will show a disk with an X through it.
- That's all.  Nothing else works except for quit.
------------------------------------------------------

Added some sketches in README.gui-sketch.  I'm thinking that the control
panel will be able to basically show one of these screens at a time.  When
you first start you would see ChooseConfigScreen which chooses between the
configurations that you have loaded recently (which it would remember
by the pathname of their bochsrc).  Whether you choose an existing 
configuration to be loaded or a new one, when you click Ok you go to
the first configuration screen, ConfigDiskScreen.

Each of the configuration screens takes up the whole control panel window.
We could use tabs on the top and/or "<-Prev" and "Next->" buttons to make
it quick to navigate the configuration screens.  Each screen should
probably have a Prev, Next, Revert to Saved, and Accept button.
The menu choices like Disk..., VGA..., etc. just switch directly to
that tab.


------------------------------------------------------
Notes:

events from gui to sim:
- [async] key pressed or released
- [async] mouse motion with button state
- [sync] query parameter
- [sync] change parameter
- [async] start, pause, stop, reset simulation.  Can be implemented
  as changing a parameter.
- [async] request notification when some param changes

events from sim to gui:
- [async] log message to be displayed (or not)
- [async] ask user how to proceed (like panic: action=ask)
- [async] param value changed
- make my thread sleep for X microseconds  (call wxThread::sleep then return)


implement the floppyA and floppyB change buttons using new event
structure.  How should it work?

vga gui detects a click on floppyA bitmap
construct a BxEvent type BX_EVT_ASK_PARAM
post the event to the wxwindows gui thread (somehow) and block for response
when it arrives in the gui thread, show a modal dialog box
get the answer back to the simulator thread


right now, this is working ok within the simulator thread using
wxMutexGuiEnter/Leave.  Still I'm going to change it so that the
siminterface.cc code builds an event structure and the gui code
fills in the blank in the structure, instead of the stupid 
notify_get_int_arg stuff.


Starting and Killing Threads

When a detachable (default) thread finishes (returns from its Entry()
function), wxwindows frees the memory associated with that thread.  
Unless the thread is never going to end, it is potentially dangerous to have a
pointer to it at all.  Even if you try to "check if it's alive" first, you may
be dereferencing the pointer after it has already been deleted, leading to it
claiming to be alive when it's not, or a segfault.  To solve this, the approach
used in the wxwindows threads example is to have code in the thread's OnExit()
method remove the thread's pointer from the list of usable threads.  In
addition, any references or changes to the list of threads is controlled by a
critical section to ensure that it stays correct.  This post finally 
explained what I was seeing.

+-----------------------
| From: Pieter van der Meulen (pgmvdm@yahoo.com)
|  Subject: Re: Thread Sample program - bug 
|  Newsgroups: comp.soft-sys.wxwindows
|  Date: 2001-06-28 17:51:35 PST 
| 
| 
| At 06:24 PM 6/28/2001, you wrote:
| >Hi,
| >I have wxWindows 2.2.7 (wxMSW) installed.
| >
| >I just found in the thread.cpp sample code this section:
| >
| ><code>
| >void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event) )
| >{
| >     size_t count = wxGetApp().m_threads.Count();
| >     for ( size_t i = 0; i < count; i++ )
| >     {
| >===>        wxGetApp().m_threads[0]->Delete();    <=====
| >     }
| >
| >     Close(TRUE);
| >}
| ></code>
| >The indecated line should probably rather have a
| >m_threads[i]     rather than     m_threads[0] .
| 
| No, it should not, although it is not immediately obvious. When Delete() is 
| called, the thread will eventually delete itself, but not before it calls 
| MyThread::Exit(), which will remove itself from m_threads[] using 
| wxArray::Remove(this). wxArray::Remove (RemoveAt) will compact the array to 
| remove the element, it is now size-1. After this wxThread::Delete() returns.
| 
| 
| >I have have a further question to this:
| >Does this mean that a detached thread created with new
| >HAS to be deleted  manually ?  Or is this only in case it might still
| >be running?
| 
| Firstly, you must create every detached thread using new since it will 
| delete itself, literally calling delete this.
| Calling wxThread::Delete() is a correct way to terminate a thread, but 
| manually deleting (using delete) a detached wxThread object is not. 
| wxThread::Delete() will ask the thread to exit, the thread should check for 
| this in wxThread::Entry() regularly using wxThread::TestDestroy() and exit 
| when asked to do so.
| 
| >(In general I have a unsatisfied felling about when delete is
| >neccessary and when not -- "I only know, it's not , if the class is
| >derived from wxWindows")
| 
| For wxThreads: joinable threads must be deleted (when allocated on the 
| heap), detached threads may never be deleted. For other classes, consult 
| the documentation ;)
| 
| 
| >Thanks for some feedback,
| >Sebastian
| 
| Regards,
| 
| Pieter.
+-----------------------



-------------------------------------------------------------
Bochs x86 Pentium Emulator
Upated: Mon Mar 11 12:30:24  2002
Version: 1.4.pre2

WHAT IS BOCHS?

Bochs is a highly portable open source IA-32 (x86) PC emulator
written in C++, that runs on most popular platforms.  It includes
emulation of the Intel x86 CPU, common I/O devices, and a custom
BIOS.  Currently, bochs can be compiled to emulate a 386, 486 or
Pentium CPU.  Bochs is capable of running most Operating Systems
inside the emulation including Linux, Windows 95, DOS, and 
Windows NT 4.  Bochs was written by Kevin Lawton and is currently 
maintained by the Bochs project at "http://bochs.sourceforge.net".

Bochs can be compiled and used in a variety of modes, some which are
still in development.  The 'typical' use of bochs is to provide
complete x86 PC emulation, including the x86 processor, hardware
devices, and memory.  This allows you to run OS's and software within
the emulator on your workstation, much like you have a machine
inside of a machine.  Bochs will allow you to run Win '95
applications on a Solaris machine with X11, for example.

Bochs is distributed under the GNU LGPL.  See COPYING for details.

GETTING CURRENT SOURCE CODE 

Source code for Bochs is available from the Bochs home page at
http://bochs.sourceforge.net.  You can download the most recent
release, use CVS to get the latest sources, or grab a CVS
snapshot which is updated nightly.  The releases contain the most
stable code, but if you want the very newest features try the
CVS version instead. 

WHERE ARE THE DOCS?

The Bochs documentation has been overhauled, and it is now
distributed in a separate package called bochsdoc-VERSION.tar.gz.
A copy is also online at 
  http://bochs.sf.net/doc/docbook/alldocs.html
For now, the old documentation can still be found at
  http://bochs.sf.net/docs-html

WHERE CAN I GET MORE INFORMATION?  HOW DO I REPORT PROBLEMS?

Both the documentation and the Bochs website have instructions on how 
to join the bochs-developers mailing list, which is the primary
forum for discussion of Bochs.  The main page of the website also
has links to bug reports and feature requests.  You can browse and
add to the content in these areas even if you do not have a (free)
SourceForge account.  We need your feedback so that we know what
parts of Bochs to improve.  

There is a patches section on the web site too, if you have made
some changes to Bochs that you want to share.

HOW CAN I HELP?

If you would like contribute to the Bochs project, a good first step
is to join the bochs-developers mailing list, and read the archive
of recent messages to see what's going on.  

If you are a technical person (can follow hardware specs, can write
C/C++) take a look at the list of open bug reports and feature
requests to see if you are interested in working on any of the
problems that are mentioned in them.  If you check out the CVS
sources, make some changes, and create a patch, one of the
developers will be very happy to apply it for you.  Developers who
frequently submit patches, or who embark on major changes in the
source can get write access to CVS.  Be sure to communicate with the
bochs-developers list to avoid several people working on the same
thing without realizing it.

If you are a Bochs user, not a hardware/C++ guru, there are still
many ways you could help out.  For example:
  - improving win32 binary releases
  - building up a set of useful tools to include in those releases
  - writing/cleaning up documentation
  - testing out Bochs on every imaginable operating system and 
    reporting how it goes.
