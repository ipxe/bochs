<!--
================================================================
doc/docbook/user/user.dbk
$Id: user.dbk,v 1.9 2001/09/20 03:27:07 bdenney Exp $

This is the top level file for the Bochs Users Manual.
================================================================
-->

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [

<!-- include definitions that are common to all bochs documentation -->
<!ENTITY % bochsdefs SYSTEM "../include/defs.sgm">
%bochsdefs;

]>

<book>
<bookinfo>
   <title>Bochs User Manual</title>
   <authorgroup>
   <author><firstname>Kevin</firstname><surname>Lawton</surname></author>
   <author><firstname>Bryce</firstname><surname>Denney</surname></author>
   <editor><firstname>Michael</firstname><surname>Calabrese</surname></editor>
   </authorgroup>
</bookinfo>

<!-- *************************************************************** -->
<chapter><title>Introduction to Bochs</title>
<section><title>What is Bochs?</title>
<para>
Bochs is a program that simulates a complete Intel x86 computer.  It 
can be configured to act like a 286, 386, 486, Pentium, or Pentium Pro.
Bochs interprets every instruction from power-up to reboot, and has
device models for all of the standard PC peripherals: keyboard, mouse,
VGA card/monitor, disks, timer chips, network card, etc.  Because Bochs
simulates the whole PC environment, the the software running in the simulation
"believes" it is running on a real machine.  This approach allows Bochs
to run a wide variety of software with no modification, include most popular
x86 operating systems: Windows 95/98/NT, all Linux flavors, all BSD flavors,
and more.
</para>

<para>
Bochs is written in the C++ programming language, and is designed to run
on many different host platforms<footnote>
<para>
Since Bochs can run on one kind of machine and simulate another machine, we
have to be clear in our terminology to avoid confusion.  The host platform is
the machine that runs the Bochs software.  The guest platform is the operating
system and applications that Bochs is simulating.
</para>
</footnote>, including x86, PPC, Alpha, Sun, and MIPS.  No matter what the
host platform is, Bochs still simulates x86 software.  In other words, it
does not depend on the native instructions of the host machine at all.
This is both a strength and a weakness, and it's the major difference between
Bochs and many other x86 emulation software such as plex86, VMware, etc.
Because Bochs uses software simulation for every single x86 instruction, it
can simulate a Windows application on an Alpha or Sun workstation.  However,
the downside of Bochs's approach is simulation performance.  To model the
processor accurately, Bochs must run many instructions for every simulated x86
instruction, and this makes the simulated machine many times slower than
the physical machine.  Commercial PC emulators (VMware, Connectix, etc.) can
achieve much high emulation speed using a technique called 
virtualization<footnote>
<para>
Virtualization takes advantage of simulating x86 instructions on an
x86 machine, allowing large portions of the simulation to take place
at native hardware speed.  Whenever the simulated machine talks to the
hardware or enters certain privileged modes (such as in kernel code),
the simulator typically takes command and simulates that code in
software at much slower speed, just like Bochs does.
</para>
</footnote>, but they are neither portable to non-x86 platforms nor open
source.  <ulink url="http://www.plex86.org">Plex86</ulink>, Kevin Lawton's
current project, is working toward an open-source x86 simulator with
virtualization.
</para>

<para>
To do anything interesting in the simulated machine, Bochs needs to communicate
with the operating system on the host platform (the host OS).  When you press a
key in the Bochs display window, a key event goes into the device model for the
keyboard.  When the simulated machine needs to read from the simulated hard
disk, Bochs reads from a disk image file on the host machine.  When the
simulated machine sends a network packet to the local network, Bochs uses the
host platform's network card to send the packet out into the real world.  These
interactions between Bochs and the host operating system can be complicated,
and in some cases they are host platform specific.  Sending a network packet in
FreeBSD requires different code than sending the packet in Windows 95, for
example.  For this reason, certain features are supported on some host
platforms and not others.  On Linux, Bochs can simulate a network card that
communicates with the world, but on BeOS the simulated network card may not
work because the communication code between the device model and the BeOS
operating system has not been written.
</para>

<para>
<!-- really more like Background or Bochs History, but maybe it doesn't need its own section unless it gets to 3 paras or so  -->

Bochs was written by Kevin Lawton starting in 1994.  It began as a 
commercial product, which ...&NEEDHELP; <footnote>
<para>
We need a Bochs historian to help out here.  For background, it would be
interesting to know how much Bochs used to cost and what it was used for.  I
thought I saw an interview out there somewhere where Kevin says why he started
it and some more background information.
</para>
</footnote> Finally, in March 2000, Mandrakesoft bought Bochs and made it open
source under the GNU LGPL.

<!-- 
we should make it clear that Kevin is no longer working on bochs,
but I want to get some more background.  Did he get hired by Mandrakesoft
to do plex86 at the same time as Bochs was bought?  In his linux.com interview
Kevin said: "The only way I can move Bochs to open source is if someone
sponsors that happening. That would be ideal, and would enable me to focus more
on Bochs and FreeMWare, rather than be sidetracked with related consulting
jobs."

The last version of Bochs that he released was 3/25/2000, three days after the
Mandrake press release.
-->
In March 2001, Kevin helped a few developers to move all Bochs activities from bochs.com to a new site at bochs.sourceforge.net.  Since then the Bochs Project has settled into its new home, and around release times has even hit #1 most active project of the week at Source Forge.  </para> </section>  <!-- end of Introduction:What is Bochs? section --> <section><title>Who uses Bochs?</title> <para> It is hard to estimate how many people have tried Bochs or use it on a regular basis, but a few statistics give an indication.  The bochs-developers mailing list, which is the primary source of news on bugs and releases, has over 300 subscribers.  The latest version has been downloaded over 40,000 times from SourceForge, not counting mirrors or CVS users.
</para>

<para>
Bochs has many different uses, and different people use it for different 
things.  Many people use it to run applications in a second operating system 
without needing two different computers or dual-booting.  Running 
Windows software on a non-x86 workstation or on an x86 Linux box are common
uses.  Also, because every hardware instruction and every line of simulator
code is accessible, Bochs is used extensively for debugging new operating
systems and profiling.  If you were writing boot code for your home-brewed
x86 operating system and it didn't work right, booting it in Bochs could
give you great visibility into what is really going on.  The Bochs 
debugger lets you simulate quickly or slowly, pausing whenever you want
to look at the contents of memory or the CPU registers.  Or, if you 
wanted to study which parts of a program take the most time, you could use
Bochs to measure often pieces of the code were executed.
</para>

<para>
Bochs has been used as a teaching tool in Operating Systems classes, in which
students used it to learn how the PC hardware works.  As a final project the
students had to add a new peripheral device, so they had to learn all about I/O
ports, interrupts, and device drivers.  Also, it has been used as a 
reference model to test x86-compatible hardware.
</para>

<para>
There may be as many uses of Bochs as there are users.  Do you want to run 
your old DOS games?  Or learn to program under Linux, without leaving your
Windows desktop?  Or reverse engineer your printer driver?  You decide.
</para>
</section>  <!-- end of Introduction:Who uses Bochs? section -->

<section><title>Will it work for me?</title>
<para>
Bochs is very useful for some applications, and not well suited to others.
This section tries to answer the question, "Will Bochs work for me?"
</para>

<para> &FIXME; </para>
<!--
I want this section to set reasonable expectations for people before they
try out Bochs.  They should not expect to find blazing speed and complain
to the list because Bochs perfoms so poorly compared to their VMWare demo.
For simulating x86 on x86, if they want blazing speed they should look
at a commercial simulator or plex86 (though it's still in development so
it's not fast yet).

Another factor is ease of setup.  With bochs you have to go editing config
files in a text editor (with a very picky syntax), which is not for 
everybody.

<para>
If you are running on a x86 hardware, you have a range of choices.
Check the installation section for your host platform to see what 
options Bochs supports on your platform<footnote>
<para>
&FIXME; Well, it will when it has been written.
</para>
</footnote>.  Bochs will run on Windows, Linux,
FreeBSD, OpenBSD, or BeOS.  If the most important factor is speed, you may
want to try a virtualization product instead of Bochs (VMware, plex86).
</para>

<para>
If you are using a non-x86 machine, then Bochs is one of the few choices for
running x86 software.  Bochs has been known to work on Solaris (Sparc), 
Linux (PowerPC/Alpha), MacOS (PowerPC), IRIX (MIPS), BeOS (PowerPC), Digital
UNIX (Alpha), and AIX (PowerPC).
</para>
-->

<para>
You can also find more detailed testing information on the testing
status page on the &bochswebsite;.  The testing status page tells which
combinations of host platform and guest platform have been tried by other Bochs
users.
</para>

</section>  <!-- end of Introduction:Will it work for me? section -->

<section><title>License</title>
<para>
Bochs is copyrighted by MandrakeSoft S.A.<footnote>
<para>
MandrakeSoft has web sites at
<ulink url="http://mandrakesoft.com">http://mandrakesoft.com</ulink> and
<ulink url="http://www.linux-mandrake.com">http://www.linux-mandrake.com</ulink>.
</para>
</footnote>
and distributed under the
GNU Lesser General Public License<footnote>
<para>
Complete text of the GNU LGPL is included with the source code in a file
called COPYING, and is also <ulink url="http://www.gnu.org/licenses/lgpl.html">here</ulink>.
</para>
</footnote>.  The following text appears at the
top of every source code file in the Bochs distribution:
<programlisting>
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
</programlisting>

</para>

</section>  <!-- end of Introduction:License section -->

</chapter>  <!-- End of Introductino to Bochs -->

<!-- *************************************************************** -->
<chapter><title>FAQ</title>
<qandaset>
  <qandaentry>
     <question>
       <para>Is Bochs Open Source?</para>
     </question>
     <answer>
       <para>
       Yes! Bochs is released under the <ulink url="http://www.gnu.org/copyleft/lesser.html">GNU LGPL</ulink>,
       much thanks to <ulink url="http://www.linux-mandrake.com">MandrakeSoft</ulink>, makers
       of the Linux-Mandrake distribution.
       </para>
     </answer>
  </qandaentry>

  <qandaentry>
     <question>
       <para>How do you pronounce "bochs"?</para>
     </question>
     <answer>
       <para>
       Phonetically the same as the English word "box". It's just a play on the word "box", since techies like to call their machines a "Linux box", "Windows box", ... Bochs emulates a box inside a box. 
       </para>
     </answer>
  </qandaentry>

  <qandaentry>
     <question>
       <para>Who is the author of bochs?</para>
     </question>
     <answer>
       <para>
       Kevin Lawton is the primary author of bochs. There have been bug fixes, enhancements, and code contributions from some few hundred people, so it is not possible to list them all. Kevin is presently working on a PC virtualization project called <ulink url="http://www.plex86.org">plex86</ulink> and no longer maintain bochs.
       </para>
     </answer>
  </qandaentry>

  <qandaentry>
     <question><para>
     Who maintains bochs now?
     </para></question>
     <answer><para>
      With Kevin's help, in April 2001, the members of the bochs-developers mailing list set up a new official bochs site hosted by <ulink url="http://sourcefourge.net">Source Forge</ulink>. The current admins on this project are Bryce Denney and Greg Alexander.
     </para></answer>
  </qandaentry>

  <qandaentry>
     <question><para>
     Tell me about peformance when running bochs?
     </para></question>
     <answer><para>
     Because Bochs emulates every x86 instruction and all the devices in a PC system, it does not reach high emulation speeds. Kevin reported approximately 1.5MIPS using bochs on a 400Mhz PII Linux machine. Users who have an x86 processor and want the highest emulation speeds may want to consider PC virtualization sotware uch as plex86 (free) or vmware (commercial). 
     </para></answer>
  </qandaentry>

  <qandaentry>
     <question><para>
     Does bochs use a disk partition to install the OS? 
     </para></question>
     <answer><para>
     No. You use a disk image file, which is simply a large file, like any other file, on your platform's disk. 
     </para></answer>
  </qandaentry>

  <qandaentry>
     <question><para>
     Why can't I use Bochs with my current Win95 installation? 
     </para></question>
     <answer><para>
     Think about this. If you had two different PC's, they would require different hardware drivers. So you may not be able to safely move a disk drive with Win95 on it, from one to the other. Bochs is no different. It emulates a certain set of hardware devices, and requires each OS be configured for those devices. 
     </para></answer>
  </qandaentry>

  <qandaentry>
     <question><para>
     Is there a developer's email list for bochs?
     </para></question>
     <answer><para>
     Yes.  For instructions on joining, go to
     <ulink url="developers.html">Developers email-list.</ulink>
     </para></answer>
  </qandaentry>

  <qandaentry>
     <question><para>
     Is there an irc channel for bochs?
     </para></question>
     <answer><para>
     Not that I am aware of.
     </para></answer>
  </qandaentry>

  <qandaentry>
     <question><para>
     Do you know of any snapshots of Bochs running Win95?
     </para></question>
     <answer><para>
     Yes!  Look for "screen shots" on the <ulink url="http://bochs.sourceforge.net">Bochs home page</ulink> or on other Bochs sites.
     </para></answer>
  </qandaentry>

  <qandaentry>
     <question><para>
     Does bochs support a CDROM?
     </para></question>
     <answer><para>
     Yes, a CDROM is supported in Linux, Windows, and OpenBSD.  The
CDROM drivers for bochs allow the guest operating system to access the
host operating system's CDROM data directly.
     </para></answer>
  </qandaentry>

  <qandaentry>
     <question><para>
     Does bochs support a sound device?
     </para></question>
     <answer><para>
     Yes, there is Sound Blaster emulation support for Windows and Linux.
     </para></answer>
  </qandaentry>

  <qandaentry>
     <question><para>
     Does bochs support a network card?
     </para></question>
     <answer><para>
     Supposedly yes.  There is emulation for an NE2000 NIC in the current
releases, though I have not heard whether it works or not.  If you try it,
please fill out a testing form or bug report.
     </para></answer>
  </qandaentry>

  <qandaentry>
     <question><para>
     What applications are known to run inside of bochs?
     </para></question>
     <answer><para>
     Well, lot's of different OS's run inside of bochs, so
   thousands.  I'm assuming your asking about Windows programs.
   To give you a few, the following ones from the Winstone'98 tests
   worked:
   </para>
   <itemizedlist>
      <listitem>
      <para>Access 97</para>
      </listitem>
      <listitem>
      <para>CorelDRAW! 7</para>
      </listitem>
      <listitem>
      <para>Excel 97</para>
      </listitem>
      <listitem>
      <para>Lotus 1-2-3 97</para>
      </listitem>
      <listitem>
      <para>Word 97</para>
      </listitem>
      <listitem>
      <para>PowerPoint 97</para>
      </listitem>
      <listitem>
      <para>Quattro Pro 7</para>
      </listitem>
      <listitem>
      <para>WordPerfect 7</para>
      </listitem>
   </itemizedlist>

     <para>Also, I've compiled an entire OS kernel inside bochs before.  Not
to mention, running DOOM, though at then-pathetic speeds.
     </para></answer>
  </qandaentry>

<!-- ......................................................
     A blank question to fill in copy and paste to create
     a new entry (8 lines to yank)
     ......................................................
  <qandaentry>
     <question><para>
     Question is put here
     </para></question>
     <answer><para>
       Answer is put here. 
     </para></answer>
  </qandaentry>
-->

</qandaset>
</chapter>

<!-- *************************************************************** -->
<chapter><title>Installation</title>

<section><title>Platforms</title>

<para>
&FIXME;
Add information about what features are supported on what platforms.
Example: networking on *bsd, linux only.  cdrom on ....
</para>


<table><title>Supported platforms</title>
   <tgroup cols=2 align=left colsep=1 rowsep=1>
   <tbody>
   <row>
      <entry>Unix/X11</entry>
      <entry>This was Kevin's main development platform.</entry>
   </row>
   <row>
      <entry>BeOS</entry>
      <entry>Kevin Lawton also did this port, originally to R3/PPC using CodeWarrior.
      It now works on R4/x86 with egcs. Simon Huet picked up
      maintaining/reworking the BeOS GUI port. Check out Simon's 
      BeBochs page.
      </entry>
   </row>

   <row>
      <entry>Win32</entry>
      <entry> This port was done by David Ross. I've enhanced
      the build process
      for Win32. You can compile with either the MS Visual C++ 5.0
      or GNU-Win32 environments. Go to Compiling Bochs on Win32 </entry>
   </row>

   <row>
      <entry>OS/2</entry>
      <entry> Nick Behnken used PE2LX to translate David Ross's Win32
      port to an OS/2 program. Check out Nick Behnken's page. 
      </entry>
   </row>
   <row>
      <entry>OS/2</entry>
      <entry> Craig Ballantyne ported bochs to OS/2. I will 
      integrate this back
      into the main bochs source soon. Check out the guiSoft Corp.
      home page.
      </entry>
   </row>

   <row>
      <entry>Macintosh</entry>
      <entry>David Batterham drbatter@socs.uts.edu.au or
      drbatter@yahoo.com ported bochs to the Mac. His changes are
      integrated, though it is work in progress. 
      He compiled with CodeWarrior
      Pro R1 (CW12), and included a project file 'Bochs.proj'
      in the top-level
      directory of source code, which you may need to modify. I
      added a '--with-macos' option to configure, so you can use a Unix
      machine to generate header files for the Mac. Check out David's
      MacBochs website. David has not had time to maintain the page or the
      Mac port since early 2000. If you have Mac 
      development tools and want
      to contribute, contact the developers list. </entry>
   </row>
   <row>
      <entry>FreeDOS for Bochs</entry>
      <entry> David Batterham also offers information on running FreeDOS inside of bochs. You can download a disk image with a pre-installed copy of FreeDOS, a completely free DOS-like operating system. Check out his website at http://members.xoom.com/macbochs/freedos.html.
      For more info about FreeDOS, see FreeDOS Web page</entry>
   </row>
   </tbody>
   </tgroup>

</table>
</section>  <!-- End Platforms section -->

<section id="downloading"><title>Downloading Bochs</title>

<para>
You can download Bochs from our web site at &bochs-sf-net;.  First, you
need to choose what version to get: a recent release or a development
version.  If you trying to get things working for the first time, a release
version is recommended since it has been tested the most.  The development
versions (sometimes called snapshots) may have some newer bug fixes and new
features, but have not been tested as much as the releases.
See the <link linkend="linuxrpm">Linux RPM Section</link> for more information.
</para>

<para>
Second, you can choose to compile Bochs from source code or install a binary
(if one is available for your platform).  Binary packages will be quicker to
install, and most include a small demo of a guest operating system called DLX
Linux to get you started.  However, some features can only be enabled if you
compile Bochs yourself, for example the Bochs debugger.  For multiuser systems,
you will probably need system administrator privileges (root) to install a
binary package.  If you decide to get a binary, download it to your hard disk
and then go to the section called <link linkend="install-binary">Installing a
Binary</link> for more information.
</para>

<para>
If you are going to compile Bochs yourself, you need the gzipped tarball
containing the source code, called
<filename>bochs-<replaceable>version</replaceable>.tar.gz</filename>.  For
Windows and Mac, the prebuilt Makefiles are separate, so also get
the Makefiles for your platform.  To unpack a compressed TAR file<footnote>
<para>
A TAR file is a single file that contains many files packed inside.  Bochs
TAR files are compressed with a program called gzip, and another program
called gunzip is used to uncompress them.
</para>
</footnote>, type
<screen>
  gunzip -c bochs-<replaceable>version</replaceable>.tar.gz | tar -xvf -
</screen>
This creates a directory called
<filename>bochs-<replaceable>version</replaceable></filename> full of
files.  This directory will be referred to as &bochsdir;.  Go into
&bochsdir; and you are ready to compile.  Instructions for compiling 
Bochs are in
<xref linkend="compiling">.
</para>

<para>
Alternatively, you can also obtain the sources for any Bochs version using CVS.
See the <link linkend="get-src-cvs">CVS instructions</link> for details.
</para>
</section>  <!-- End of Installation:Downloading Bochs section -->

<section id="get-src-cvs"><title>Tracking the source code with CVS</title>
<para>
CVS, or Concurrent Version System, is a software development tool that helps
to keep track of the different revisions of each file.  It is used by many
open source (and commercial) projects to allow multiple developers to share
their changes to the source code.  The Bochs source code and documentation 
are available using CVS<footnote>
<para>
You can download CVS software and documentation from 
<ulink url="http://www.cvshome.org">www.cvshome.org</ulink>.
</para>
</footnote>.
</para>

<section><title>Checking out Bochs</title>
<para>
When you have CVS installed, the first step is to do a login and checkout.  The
initial checkout command is long and ugly, but usually you only have to do it
once.  The example below shows the CVS checkout process in UNIX.  On the
Windows platform, you can download a CVS client from cvshome.com, or
use CVS within Cygwin<footnote>
<para>
Cygwin is an open source UNIX-like environment for Windows platforms,
available at <ulink url="http://www.cygwin.com">www.cygwin.com</ulink>.
</para>
</footnote>.

<figure><title>Checking out Bochs in CVS</title>
<screen>
  user$ <command>cvs -d:pserver:anonymous@cvs.bochs.sourceforge.net:/cvsroot/bochs login</command>
  (Logging in to anonymous@cvs.bochs.sourceforge.net)
  CVS password:    <replaceable>(there is no password, just press Enter)</replaceable>
  user$ <command>cvs -z3 -d:pserver:anonymous@cvs.bochs.sourceforge.net:/cvsroot/bochs checkout bochs</command>
  cvs server: Updating bochs
  U bochs/.bochsrc
  U bochs/.conf.AIX.4.3.1
  U bochs/.conf.beos-x86-R4
  U bochs/.conf.macos
     .
     .   <lineannotation>(This might take a few minutes, depending on your network connection.)</lineannotation>
     .
  U bochs/patches/patch.seg-limit-real
  user$ <command>cd bochs</command>
  user$ <command>ls</command>
  Bochs.proj.hqx  bxversion.h   fpu/                osdep.cc
  CHANGES         config.h.in   gui/                osdep.h
  COPYING         configure*    install-x11-fonts*  patches/
  CVS/            configure.in  instrument/         pc_system.cc
  Makefile.in     cpu/          iodev/              pc_system.h
  README          debug/        load32bitOShack.cc  state_file.cc
  TESTFORM.txt    disasm/       logio.cc            state_file.h
  bios/           doc/          macintosh.txt       win32.txt
  bochs.h         docs-html/    main.cc
  bochs.rsrc.hqx  dynamic/      memory/
  build/          font/         misc/
  user$ _
</screen>
</figure>
</para>


<tip>
<para>
If you have write access to the Bochs CVS tree, the checkout
command is different for you.  See the Developers Guide<footnote>
<para>
&FIXME; not written yet.  For now, look at http://sourceforge.net/cvs/?group_id=12580 for instructions. See "Developer CVS access using SSH."
</para>
</footnote> for details.
</para>
</tip>

<tip>
<para>
If you use remote CVS for other projects, you might have already set
the environment variable <varname>CVS_RSH</varname> in your configuration
files.  For the CVS checkout to work as shown above, the
<varname>CVS_RSH</varname> variable should either be empty or set to
<constant>rsh</constant>.
</para>
</tip>

<para>
The CVS checkout process (above) gives you a directory called bochs that
contains the very latest source code.  I will refer to this directory
as &bochsdir;.  In each subdirectory directory there's also a
directory called "CVS" which tells the cvs software where the code was checked
out, what version you have, and where to go for future updates.
</para>
</section>

<section><title>Getting the Latest Version</title>
<para>
Most developers use CVS to always give them the latest source code.  The minute
that any developer checks in a change, they are available to everyone else
through  CVS.  You just have to type <command>cvs update -d -A</command> in the
&bochsdir; directory, and CVS will retrieve any files and directories that have
been changed since you did a checkout.  If you update regularly, each update
takes a short time because it downloads only the files that changed.  The
<command>-d</command> option tells cvs to download new directories that
have been checked in, not just files.  The <command>-A</command> option means
to get the most recent version of each file, as opposed to a release version.
See <link linkend="cvs-release-version">Getting a release version</link>
Both <command>-d</command> and <command>-A</command> can be omitted in many
cases, once you are familiar with the process.  </para>

<para>
The <command>cvs update -A -d</command> command tells you if any new files have
been downloaded from the server, and it also tells you if you have modified any
of the CVS-controlled files.  As it checks through the source directories, it
will list files that have changed, with a single letter before the name that
tells the status of that file.  The most common status letters are listed
below.

<table frame="all">
<title>Status letters in a CVS update</title>
  <tgroup cols="3">
    <thead>
      <row>
	<entry>Letter</entry>
	<entry>Mnemonic</entry>
	<entry>Description</entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry>?</entry>
	<entry>unknown</entry>
	<entry>
	This file is in your bochs directory, but CVS does not know anything
	about it.  For example, when you compile Bochs, any files created
	during the build process appear as ?.
	</entry>
      </row>
      <row>
	<entry>U</entry>
	<entry>update</entry>
	<entry>
	cvs downloaded a new version of this file because it changed on the
	server, usually because someone else did a checkin.
	</entry>
      </row>
      <row>
	<entry>P</entry>
	<entry>-</entry>
	<entry>
	P is the same as U, as far as I can tell
	</entry>
      </row>
      <row>
	<entry>M</entry>
	<entry>modified</entry>
	<entry>
	You have changed this file on your disk, so it no longer matches the
	version on the server.  This is not a problem; it's just for your 
	information.  If you want, you can discard your changes and
	get a fresh copy by deleting the file and running cvs update again.
	</entry>
      </row>
      <row>
	<entry>C</entry>
	<entry>conflict</entry>
	<entry>
	You have changed this file on your disk, but this change conflicts with
	a change that was checked in.  Conflicts occur when two people change
	the same line of code in different ways.  You need to edit the
	conflicting file(s) and clean it up by hand.  Or, sometimes it's
	easiest to discard your own edits and download a fresh copy, by
	deleting the conflicting file and running cvs update again.
	</entry>
      </row>
    </tbody>
   </tgroup>
</table>
</para>

<para>
If you have been using <command>cvs update</command> with "sticky tags" to
retrieve other versions, as described later, cvs will remember which version
you were looking at.  In this case, a <command>cvs update</command> will keep
your sources consistent with that version.  If you want to get back to looking
at the latest code again, be sure to use the <command>-A</command> option to
clears the sticky tags.  </para>

</section>

<section id="cvs-release-version"><title>Getting a Release Version</title>
<para>
Once you have a CVS checkout, you can also use the update command to
get the Bochs source code for any release since March 2000.  The command
is <command>cvs update -d -r <replaceable>tagname</replaceable></command>.
The tag tells which release you want, and it can be one of the following:

<table frame="all">
<title>CVS Release Tags</title>
  <tgroup cols="2">
    <thead>
      <row>
	<entry>Bochs version</entry>
	<entry>Release tag for CVS</entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry>1.2.1 (bugfix1)</entry>
	<entry>REL_1_2_1_FINAL</entry>
      </row>
      <row>
	<entry>1.2</entry>
	<entry>REL_1_2_FINAL</entry>
      </row>
      <row>
	<entry>1.1 (bugfix1)</entry>
	<entry>REL_1_1_BASE</entry>
      </row>
      <row>
	<entry>1.1.2 (bugfix3)</entry>
	<entry>REL_1_1_2_BASE</entry>
      </row>
      <row>
	<entry>1.1.1 (bugfix2)</entry>
	<entry>REL_1_1_1_BASE</entry>
      </row>
      <row>
	<entry>1.1 (bugfix1)</entry>
	<entry>REL_1_1_BASE</entry>
      </row>
      <row>
	<entry>March 25, 2000</entry>
	<entry>REL-bochs-2000-03-25</entry>
      </row>
    </tbody>
   </tgroup>
</table>

<tip>
<para>
To get a complete list of allowed tags, type <command>cvs stat -v README</command>.  Many of the tags are not generally useful.
</para>
</tip>

Once you have done an update with <command>-r <replaceable>tagname</replaceable></command>, you have made a "sticky tag."  The stickiness refers to the fact
that CVS remembers which tag you have used most recently.  The tag is stored
in the CVS subdirectory, so it stays around even if you log off and
return later.  After creating a sticky tag, any future cvs updates will
try to keep your directory in sync with the version you chose.  In other
words, when developers check in changes you will not
see them because your directory is "stuck" looking at an old version.
To clear the sticky tag, use <command>cvs update -A</command>.
</para>

<para>
A variation on the sticky tag concept is a sticky date<footnote>
<para>
According to some sources, this is when you eat dinner with someone, and
accidently spill a drink on him/her.
</para>
</footnote>.  If some feature was working at some time in the past, but
is no longer working, you can ask CVS to give you the sources from any
date.  <command>cvs update -D 2001-06-14</command> will download the
Bochs source as they were on June 14, 2001.  Again, use <command>-A</command>
to clear the sticky date and track the current sources.
</para>
</section>

<section><title>More about CVS</title>
<para>
Entire books have been written on CVS, so there's no sense in duplicating
it all here in the Bochs documentation.  Some sources of additional
information are listed below.
</para>
<itemizedlist>
<listitem><para>The <ulink url="http://www.cvshome.org">cvshome.com
site</ulink> has tons of CVS FAQs and documentation, including the official CVS
manual by Per Cederqvist.</para></listitem>
<listitem><para>
Another <ulink url="http://www.cs.utah.edu/dept/old/texinfo/cvs/FAQ.txt">CVS FAQ</ulink> is available at University of Utah.
</para></listitem>
</itemizedlist>

</section>


</section> <!-- End of Installation:Getting the source code with CVS -->


<section id="install-binary"><title>Installing a Binary</title>

<para>
This section is divided up by platform, since installing a binary package
is different on different platforms.
</para>

<section><title>Windows</title>
<para>
unzip into some directory.  Look for DOC-win32.html
for more instructions.  Quick start: find dlxlinux/start.bat and
double click
</para>
<para>
&FIXME;
Someone needs to write this.
</para>
</section> <!-- end of Installing a Binary:Windows -->

<section id="linuxrpm">
<title>Linux RPM</title>
<para>
RPM stands for "RedHat Package Manager."  An RPM is a compressed file
containing files to be installed on your system.  Many Linux distributions,
not just RedHat ones, can install files from an RPM.  Debian packages are
available for Bochs as well, but this section talks deals with RPMs.  First,
download the Bochs RPM for your architecture to your computer.  For example, if
you have an Intel-compatible computer, be sure to get the RPM that says "for
Linux x86 distributions."  Once you have the package on your local disk, you
should be able to install it as follows<footnote>
<para>
Many distributions have their own RPM installer program, often graphical, and
they should work as well.  It is helpful to be able to see the text output from
RPM, so if you use a fancy RPM installer, be sure to find the text output and
check that it looks correct.
</para>
</footnote>:

<figure><title>Installing an RPM in Linux</title>
<screen>
  user$ <command>su</command>
  Password: 
  root# <command>ls -l bochs-1.2.1.i386.rpm</command>
  -rw-rw-r--    1 user     user      1877515 Sep 14 09:02 bochs-1.2.1.i386.rpm
  root# <command>rpm -i bochs-1.2.1.i386.rpm</command>
  Looking for fonts to install... /usr/local/bochs/latest/
  Looking for X11 Font Path... /usr/lib/X11/fonts
  Installing vga.pcf... ok    (it was already there)
  Running mkfontdir...
  Done installing Bochs fonts for X11.
  root# exit
  user$ _
</screen>
</figure>
</para>

<note>
<para>
All RPM installations are done as the root user because they require permission
to update system files and directories.  If you do not have root access you
need to compile Bochs in your home directory.
</para>
</note>

<para>
The Bochs RPM installs three new commands and associated manual pages: bochs,
bochs-dlx, and bximage.  First, let's try out the DLX Linux demo by typing
<command>bochs-dlx</command>.  This command is installed into 
<filename>/usr/local/bin</filename>, so you might need to add that
directory to your <varname>PATH</varname> variable.

<screen>
  user$ bochs-dlx
  Checking for bochs binary...ok
  Checking for DLX linux directory...ok
  Entering /usr/local/bochs/dlxlinux
  Running bochs
  ========================================================================
                         Bochs x86 Emulator 1.2.1
                               June 12, 2001
  ========================================================================
  00000000000 [    ] looking for configuration in .bochsrc
  00000000000 [    ] looking for configuration in bochsrc
  00000000000 [    ] looking for configuration in bochsrc.txt
  00000000000 [    ] reading configuration from bochsrc.txt
  00000000000 [    ] using log file bochsout.txt
</screen>
Then you get a new X11 window containing the VGA display of the simulated
machine.  First you see the VGA BIOS screen, then Linux uncompresses and
boots, and you get a login prompt.  Type "root" and ENTER to log in to
DLX linux.
<figure>
<title>DLX Linux screenshot, running on Linux</title>
<graphic format="GIF" fileref="dlxlinux-in-linux.gif">
</figure>
</para>

<para>
If you get the DLX Linux screen, your Bochs installation is working 
correctly.  This documentation will assume that everything is working
as expected, then there are some tips at the end in case any step goes wrong.
</para>

<para>
&FIXME;
Point to all the files that get installed with the RPM: binaries,
BIOSes, DLX linux, HTML docs and man pages, etc.
</para>

<tip>
<para>
&FIXME; not complete!
If RPM installation fails.... Try rpm -e bochs to erase any old bochs RPMs.
font failure? look at old bochs docs for now for instructions on installing
the VGA font by hand.  Missing RPM dependencies?  Try --nodeps option.
</para>
</tip>

</section> <!-- end of Installing a Binary:Linux section -->

</section> <!-- end of Installing a Binary -->

<section id="compiling"><title>Compiling Bochs</title>

  <section><title>Instructions for Unix</title>
<para>
Bochs is written in C++, so you need a C++ compiler to compile.  Most platforms
have been tested with GNU gcc/g++, but other compilers should work as well.
By now, you should have unpacked your source TAR file or checked out Bochs
from CVS.  If not, you can return to <link linkend="downloading">Downloading
Bochs</link> for details.  The top level directory of the source code will be
referred to as &bochsdir;.  (&bochsdir; contains the files
<filename>bochs.h</filename> and <filename>main.cc</filename> and 
subdirectories <filename>cpu</filename> and <filename>bios</filename>.)
</para>

<para>
The compile process has three basic steps: configure, make, and make install.
The next three sections describe each of the steps.  A fourth section is
a transcript of a successful compilation from start to finish.
</para>

<section id="configure"><title>Configure</title>

<para>
There is a script called <command>configure</command> which tests your
machine, C/C++ compiler and libraries to discover what settings should work on
your system.  If you run <command>configure</command> with no arguments after
it, defaults will be used for all settings.  To change the settings, you can
run <command>configure</command> again with options that override the 
defaults.  You can get a list of valid configure options by typing
<command>configure --help</command>.  All configure options are documented in a
<link linkend="config-opts">later section</link>.  </para>

<para>
Among other things, the configure script tries to guess your compiler and
a set of compile options that work.  If you want to control this,
set these environment variables before running configure:
<varname>CC</varname>, <varname>CXX</varname>, <varname>CFLAGS</varname>,
<varname>CXXFLAGS</varname>.  The bash/ksh<footnote>
<para>
In csh and variants, use the syntax <command>setenv <replaceable>VARIABLE</replaceable> <replaceable>value</replaceable></command> to change environment 
variables.
</para>
</footnote>
commands for setting the
environment variables are:
<screen>
  export CC=egcs
  export CXX="$CC"
  export CFLAGS="-Wall -O2 -m486 -fomit-frame-pointer -pipe"
  export CXXFLAGS="$CFLAGS"
</screen>
</para>

<para>
Once the <command>configure</command> script knows what options are selected,
it creates a Makefile in every source code directory, and creates 
<filename>$BOCHS/config.h</filename> with all the option values written
as preprocessor #defines.  The sources are ready to compile.
</para>

<section><title>Configure Shortcut Scripts (optional)</title>
<para>
In the Bochs sources, there are a series of scripts called
<filename>.conf.<replaceable>platform</replaceable></filename>.
These scripts run <command>configure</command> script for you, with a set of
options that appropriate for that platform.  Examples include
<filename>.conf.linux</filename>,
<filename>.conf.win32-vcpp</filename>,
<filename>.conf.AIX.4.3.1</filename>, and
<filename>.conf.beos-x86-R4</filename>.
Run a shortcut script using Bourne shell, like this:
<screen>
  sh .conf.win32-vcpp
</screen>
If you use a shortcut script, you don't need to run configure manually.
If a shortcut script is "almost right" for you, just edit it and then run
it!
</para>
</section>

</section> <!-- end of Compiling:Unix:Configure -->


<section><title>Make</title>
<para>
The <command>make</command> command compiles Bochs.  Make is a program
used by many software projects that reads the &Makefile; in each source
directory and follows the instructions that it finds there.  A &Makefile; tells
which files depend on which other files, what commands to use to compile and
link the code, and more.  After you have finished the configure step, just type
<command>make</command> to build the source code.  
</para> 

<para>
The reason that make is so popular is that it is smart about when to compile
and when not to compile.  If you run make once, it compiles every file.  But
when you run it again, it checks to see if any source files have been modified;
if not, there's nothing to do!  For example, the &Makefile; says that
<filename>main.o</filename> depends on <filename>main.cc</filename>.  Knowing 
this, it will only compile <filename>main.cc</filename> if it is newer than
<filename>main.o</filename>.
</para>

<para>
Of course, make can only do the right thing if the &Makefile; lists all the
dependencies correctly, so human error can sometimes lead make astray.
If make refuses to build something that you think it should, or you 
are getting strange compile errors, try doing <command>make all-clean</command>
and then <command>make</command> again.  All-clean means to clean up
the compiled files in every subdirectory, while <command>make clean</command>
means to clean up just the current directory<footnote>

<para>
This is different from the terminology of some other projects, and it may cause
confusion.  Sometimes "clean" implies that all subdirectories are affected.
</para>
</footnote>.  However, it's important to note that <command>make
all-clean</command> leaves the configuration intact.  You do not have
to run <command>configure</command> again.
</para>

<para>
If you're really in the mood for cleaning, <command>make dist-clean</command>
erases all the configuration information too.  In theory, after a dist-clean
your directory should look much like when you first untarred it or checked it
out.  There's usually some extra stuff lying around, but the &Makefile; tries
at least to erase any files that it created.
</para>

</section>

<section><title>Make Install</title>
<para>
Once the program has been built, the next step is typically to run
<command>make install</command> to copy the executables, documentation, and
other required files into a public place so that all users can use it.
&FIXME;
</para>
</section>

<section><title>Compile Problems</title>
<para>
<screen>
what if configure fails?
- tar up config.* and send to bochs-testing@tlw.com
- report the problem with a source forge bug report.

what if make fails?
- try make all-clean and make again
- use configure options to disable options.  For example, if errors in 
fpu/fpu_system.h, you could try --disable-fpu.
- search for the error on the Bochs website (bug reports, patches)
- if familiar with C++, many minor problems can be corrected
- move toward more stable code.  if it's CVS, see if a release version will
  compile.  Report problem to bochs-developers.
- report the problem with a source forge bug report.
</screen>

</para>
</section>

<section><title>Other</title>
<para>
<screen>
Things to not forget:
  What to try if make fails: turn off configure options,
    look at SF bugs and patches section to see if it's a known
    problem, try to fix it yourself, if using CVS version try
    a release source file instead, fix it yourself
  Make install, what it installs and where
    /usr/local/bochs/$VERSION/*
    /usr/local/bin/bochs (and bximage)
    /usr/man/man1/bochs*.1 (and bximage.1)
    make install_dlx option
  How to build an RPM in Linux
</screen>
</para>
</section> <!-- end of Other -->

</section>  <!-- end of Compiling:Unix section -->


  <section><title>Instructions for win32 VC++</title>
  <para>
  Getting the makefiles
    Download them from web site in a zip, install them on top
      of the source directory
    Run configure on a unix box, copy the Makefiles and config.h
      to your windows machine
    RUN CONFIGURE IN BOCHS!  This would be awesome.
    Cygwin?
  Building it with NMAKE
  Installation? Maybe download an existing windows binary package
    and drop in your new binary.  There is no make install, though
    this may be added some day.
    </para>
    </section>  <!-- end of Compiling:win32 -->

<section><title>Instructions for cygwin?</title>
   <para>I have no idea.</para>
</section>  <!-- end of Compiling:Instructions for cygwin? -->

<section id="config-opts"><title>Configure Options</title>
<para>
This section describes the configure options for Bochs.  The first, 
and perhaps most important option is <option>--help</option>, since it
gives you a list of all the other options.  The options in the first table 
choose which GUI library to use.  The default is <option>--with-x11</option>
so if you don't include <option>--with-*</option> it will try to compile for X
windows.

<table><title>Configure Options to select the GUI</title>
<tgroup cols=3>
  <thead>
    <row>
      <entry>Option</entry>
      <entry>Default</entry>
      <entry>Comments</entry>
   </row>
  </thead>
  <tbody>
    <row>
      <entry>--with-x11</entry>
      <entry>yes</entry>
      <entry>Use X11 GUI.  This is the default and you don't need
	  this option if you are using X11.</entry>
    </row>
    <row>
      <entry>--with-win32-vcpp</entry>
      <entry>no</entry>
      <entry>Use Win32 GUI/Visual C++ environment.  This is for running
	  configure on a platform which supports running configure, so
	  that you may then transfer the configured code over to
	  an MS Win32/Visual C++ environment.</entry>
    </row>
    <row>
      <entry>--with-rfb</entry>
      <entry>no</entry>
      <entry>Use RFB protocol to talk to AT&amp;T's <ulink
      url="http://www.uk.research.att.com/vnc/">VNC Viewer</ulink>.  The RFB
      code was written by Don Becker <email>mailto:x-odus@iname.com</email>,
      who has a Bochs-RFB web page on his site, 
      <ulink url="http://www.psyon.org/bochs-rfb/">http://www.psyon.org/bochs-rfb</ulink>.
      </entry>
      </row>
    <row>
      <entry>--with-beos</entry>
      <entry>no</entry>
      <entry>Use BeOS GUI.  The configure script will run natively
	  on BeOS; use this option when doing so.</entry>
    </row>
    <row>
      <entry>--with-term</entry>
      <entry>no</entry>
      <entry>Use text-only gui with curses library.
      </entry>
    </row>
    <row>
      <entry>--with-macos</entry>
      <entry>no</entry>
      <entry>Use Macintosh/CodeWarrior environment</entry>
    </row>
    <row>
      <entry>--with-win32</entry>
      <entry>no</entry>
      <entry>Use Win32 GUI.  I think this option was similar to
	  --with-win32-vcpp, but for targeting a Win32/gcc
	  environment. Deprecated option.</entry>
    </row>
    <row>
      <entry>--with-nogui</entry>
      <entry>no</entry>
      <entry>No native GUI, just use blank stubs.  This is if you don't
	  care about having video output, but are just running tests.
	  This option may not be up-to-date, but can be made so
	  easily.</entry>
    </row>
  </tbody>
</tgroup>
</table>

<table><title>Frequently Used Configure Options</title>
<tgroup cols=3>
  <thead>
    <row>
      <entry>Option</entry>
      <entry>Default</entry>
      <entry>Comments</entry>
   </row>
  </thead>
  <tbody>
    <row>
      <entry>--enable-cpu-level={<option>3,4,5,6</option>}</entry>
      <entry>5</entry>
      <entry>
      Select which CPU level to emulate.  Choices are 3,4,5,6 which mean target
      386, 486, Pentium, or Pentium Pro emulation.  Pentium Pro support is
      quite incomplete.
      </entry>
    </row>
    <row>
      <entry>--enable-processors={<option>1,2,3,...,15</option>}</entry>
      <entry>1</entry>
      <entry>
      By changing to more than 1 processor, you enable SMP simulation.  This
      allows you to boot Linux and maybe other OSes in SMP mode, and bochs will
      simulate all the different CPUs and communication between them.  Do not
      expect this option to speed up your simulation!  On the contrary, it has
      to spend extra time simulating the different CPUs (even if they're mostly
      idle) and the communication between them.  Use it to try out an SMP OS if
      you don't have an SMP machine, or to debug your SMP OS drivers.  Click
      here &FIXME; for more details on SMP in Bochs.
      </entry>
    </row>
    <row>
      <entry>--enable-cdrom</entry>
      <entry>no</entry>
      <entry>
      Enable use of a real CDROM.  The cdrom emulation is always present, and
      emulates a drive without media by default.  You can use this option to
      compile in support for accessing the media in your workstation's cdrom
      drive.  The supported platforms are Linux, Solaris, OpenBSD, and Windows.
      For other platforms, a small amount of code specific to your platform
      must be written.  The module iodev/cdrom.cc is the place to add more
      support.  For the most part, you need to figure out the right set of
      ioctl() calls.
      </entry>
    </row>
    <row>
      <entry>--enable-sb16={<option>dummy, win, linux</option>}</entry>
      <entry>no</entry>
      <entry>
      Enable Sound Blaster emulation.  SB16 output is only supported for
      Windows or Linux.  The <constant>dummy</constant> option means to support
      an SB16, but don't use an output device.  So for example, you might use
      <option>--enable-sb16=linux</option>. Check out &FIXME; sound.html for
      more info.
      </entry>
    </row>
    <row>
      <entry>--enable-debugger</entry>
      <entry>no</entry>
      <entry>
	Compile in support for Bochs internal command-line debugger.  This has
	nothing to do with x86 hardware debug support.  It is a more powerful
	and non-intrusive native debugger.  Enabling this will of course slow
	down the emulation.  You only need this option if you know you need it.
	After you have run ./configure, you may want to edit 'config.h' to
	customize the debugger further.  Look at the section entitled 'OPTIONAL
	DEBUGGER SECTION'.  &FIXME; add cross references
      </entry>
    </row>
    <row>
      <entry>--enable-disasm</entry>
      <entry>no</entry>
      <entry>Compile in support for built-in disassembler.  Bochs has
	  a built-in disassembler, which is useful if you either
	  run the built-in debugger (--enable-debugger), or want
	  disassembly of the current instruction when there is a
	  panic in bochs.  You don't need this option.</entry>
    </row>
    <row>
      <entry>--enable-vga</entry>
      <entry>yes</entry>
      <entry>Use VGA emulation.  VGA is the only supported option and
	  since it's the default, you don't need to include this option.</entry>
    </row>
    <row>
      <entry>--enable-fpu</entry>
      <entry>yes</entry>
      <entry>If you want to compile bochs to make use of the FPU emulator
	  written by Bill Metzenthen (the one used by the Linux kernel),
	  use this option.
      </entry>
    </row>
    <row>
      <entry>--enable-ne2000</entry>
      <entry>no</entry>
      <entry>Enable NE2000 network card support.  This requires a
      low-level component to be written for each OS.  The NE2000
      option is only supported on FreeBSD, OpenBSD, and Linux<footnote>
      <para> Windows network support coming soon!  </para>
      </footnote>.  When enabled and configured, the NE2000 device model
      can talk to any computer on the network EXCEPT FOR the local host.
      </entry>
    </row>
  </tbody>
</tgroup>
</table>

<table>
<title>Less Used Configure Options</title>
<tgroup cols=3>
  <thead>
    <row>
      <entry>Option</entry>
      <entry>Default</entry>
      <entry>Comments</entry>
    </row>
  </thead>
  <tbody>
    <row>
      <entry>--enable-cpp</entry>
      <entry>no</entry>
      <entry>
      Use .cpp as C++ suffix.  Moves all the .cc files to .cpp for use with
      compilers which want that, like MS C++ compilers.  Don't use this option
      unless you know you need it.
      </entry>
    </row>
    <row>
      <entry>--enable-x86-debugger</entry>
      <entry>no</entry>
      <entry>X86 debugger support.  If the software you run in bochs
	  needs to use the x86 hardware debugging facilities such as
	  DR0..DR8, instruction and data breakpoints etc., then you
	  should use this option.  Otherwise don't use it, as it
	  will slow down the emulation.</entry>
    </row>
    <row>
      <entry>--enable-pci</entry>
      <entry>no</entry>
      <entry>Enable limited i440FX PCI support.  This is not complete.
	  Don't use this option.</entry>
    </row>
    <row>
      <entry>--enable-port-e9-hack</entry>
      <entry>no</entry>
      <entry>Writes to port e9 go to console.  Unless you know you want
	  this option, you don't.</entry>
    </row>
    <row>
      <entry>--enable-loader</entry>
      <entry>no</entry>
      <entry>Support calling external loader from debugger.  This
	  is an unsupported option. Don't use it.</entry>
    </row>
    <row>
      <entry>--enable-instrumentation=<option>directory</option></entry>
      <entry>no</entry>
      <entry>
      Compile in support for instrumentation.  This allows you to collect
      instrumentation data from bochs as it executes code.  You have to create your
      own instrumentation library and define the instrumentation macros (hooks in
      bochs) to either call your library functions or not, depending upon whether
      you want to collect each piece of data.  [Kevin wrote: I broke some of the
      hooks when I recoded the fetch/decode loop.]
      </entry>
    </row>
    <row>
      <entry>--enable-simid={0, 1}</entry>
      <entry>0
      <entry>
      CPU simulator ID.  You likely don't need this option.  If you are using bochs
      to cosimulate, that is to run multiple simulators in parallel so that you can
      compare results and check for divergence, each simulator needs an ID.  When
      you only have one CPU simulator (as usual) the default of 0 is fine.  [Kevin
      wrote: I use this option occasionally to run 2 versions of bochs against each
      other and check for divergence, to find bugs etc.  This option gets broken
      more than not due to architectural changes, and I usually end of fixing it
      each time I use it.]
      </entry>
    </row>
    <row>
      <entry>--enable-num-sim={1, 2}</entry>
      <entry>1</entry>
      <entry>
      Number of CPU simulators.  The default of 1 is likely what you want, so don't
      use this option.  It is for assigning an ID to the simulator, for
      cosimulation described above.
      </entry>
    </row>
    <row>
      <entry>--enable-time0=n</entry>
      <entry>no</entry>
      <entry>
      Start CMOS clock at at time0 of n instead of using time().  You likely don't
      want this option.  When debugging, it is very helpful to have deterministic
      execution, and the clock is something that can skew determinism.  If you
      supply this option, pass it a value returned by the time(NULL) call, relating
      to the time you want bochs to start the CMOS clock from.  For instance,
      '--enable-time0=917385580'.  If you use this option but don't provide a
      value, configure uses a default value.  Note that the time0 option in
      .bochsrc will override this value.  Without this option, the CMOS clock uses
      a time0 based on the value of time(NULL), which is probably what you want.
      </entry>
    </row>
    <row>
      <entry>--enable-hga-dumps=<option>Nmicroseconds</option></entry>
      <entry>no</entry>
      <entry>Copy memory to HGA video buffer every N useconds.  A
	  deprecated option, don't use.</entry>
    </row>
  </tbody>
</tgroup>
</table>

</para>
</section> <!-- end of Configure Options -->

<section><title>Transcript of Successful Compilation</title>
<para>
<screen>
  user$ <command>ls -l bochs-1.2.1.tar.gz</command>
  -rw-rw-r--    1 user     user       887993 Sep 15 23:24 bochs-1.2.1.tar.gz
  user$ <command>gunzip -c bochs-1.2.1.tar.gz | tar -xvf -</command>
  bochs-1.2.1/
  bochs-1.2.1/bios/
  bochs-1.2.1/bios/BIOS-bochs-2-processors
  bochs-1.2.1/bios/Makefile.in
    .
    .
    .
  bochs-1.2.1/patches/NOTES
  bochs-1.2.1/patches/patch.4meg-pages
  bochs-1.2.1/patches/patch.goswin-changes
  user$ <command>cd bochs-1.2.1</command>
  user$ <command>./configure --enable-cdrom</command>
  creating cache ./config.cache
  checking for gcc... gcc
  checking whether the C compiler (gcc  ) works... yes
  checking whether the C compiler (gcc  ) is a cross-compiler... no
  checking whether we are using GNU C... yes
  checking whether gcc accepts -g... yes
    .
    .
    .
  creating misc/Makefile
  creating dynamic/Makefile
  creating fpu/Makefile
  creating config.h
  user$ <command>make</command>
  cd iodev && \
  make CC="gcc" CXX="c++" CFLAGS="-g -O2  " CXXFLAGS="-g -O2  " LDFLAGS="" LIBS="" X_LIBS="-L/usr/X11R6/lib" X_PRE_LIBS="-lSM -lICE" prefix="/usr/local" exec_prefix="/usr/local" bindir="/usr/local/bin" infodir="" libiodev.a
  make[1]: Entering directory `/tmp/bochs-1.2.1/iodev'
  c++ -c -g -O2    -I.. -I../instrument/stubs devices.cc -o devices.o
  c++ -c -g -O2    -I.. -I../instrument/stubs pic.cc -o pic.o
  c++ -c -g -O2    -I.. -I../instrument/stubs pit.cc -o pit.o
  c++ -c -g -O2    -I.. -I../instrument/stubs unmapped.cc -o unmapped.o
  c++ -c -g -O2    -I.. -I../instrument/stubs cmos.cc -o cmos.o
    .
    .
    .
  echo done
  done
  c++ -o bochs -g -O2   main.o load32bitOShack.o state_file.o pc_system.o osdep.o \
     iodev/libiodev.a \
     cpu/libcpu.a memory/libmemory.a gui/libgui.a \
     fpu/libfpu.a \
     -L/usr/X11R6/lib -lSM -lICE -lX11
  gcc -c -g -O2    -I. -Iinstrument/stubs misc/bximage.c -o misc/bximage.o
  c++ -o bximage -g -O2   misc/bximage.o
  user$ <command>su</command>
  root# <command>make install</command>
  cd iodev && \
  make CC="gcc" CXX="c++" CFLAGS="-g -O2  " CXXFLAGS="-g -O2  " LDFLAGS="" LIBS="" X_LIBS="-L/usr/X11R6/lib" X_PRE_LIBS="-lSM -lICE" prefix="/usr/local" exec_prefix="/usr/local" bindir="/usr/local/bin" infodir="" libiodev.a
  make[1]: Entering directory `/tmp/bochs-1.2.1/iodev'
    .
    .
    .
  /usr/local/bochs/1.2.1/install-x11-fonts
  Looking for fonts to install... font/
  Looking for X11 Font Path... /usr/lib/X11/fonts
  Installing vga.pcf... ok    (it was already there)
  Running mkfontdir...
  Done installing Bochs fonts for X11.
  root# <command>exit</command>
  user$ _
</screen>
</para>
</section> <!-- end of Transcript -->

</section> <!-- end of Compiling Bochs -->

</chapter>

<chapter><title>Setup</title>
   <section><title>What does Bochs need?</title>
        <para>
        bochsrc, BIOS, VGABIOS, VGA font, disk images.
	table of bochsrc options and what they do
	BIOS/VGABIOS, what do they do?
	VGA font, how to install it
	disk images
	  where to find one pre-made
	  make a blank one with bximage
	  grab one from a real hard disk
          </para>
   </section>
</chapter>

<chapter><title>Using Bochs</title>
    <para>
      Resources for users
        bochs-developers mailing list, archive
	testing status page: tells what has been tried and who got it working
	SourceForge
	  look for bug reports
	  how to report problems, make feature requests
          </para>
</chapter>

<chapter><title>Common problems and what to do about them (Troubleshooting)</title>
    <para>
        What's a panic?  How to report it to bug tracker, how to make
	  it non-fatal.
        Mouse behavior, enabling and disabling
	Keyboard mapping problems
	[...]
    </para>
</chapter>

<chapter><title>Tips and Techniques</title>
    <para>
	Mount disk image in loopback
        Using two hard disks
	[...]
    </para>
</chapter>
<chapter><title>Guest operating systems</title>
	<section><title>Linux</title>
           <para>
	    What disk images are available.
	    Installing from scratch.
	    What works
	    Known problems
            </para>
          </section>
	  <section><title>OpenBSD</title>
             <para>
             </para>
          </section>
	  <section><title>FreeBSD</title>
             <para>
             </para>
          </section>
	  <section><title>FreeDOS</title>
             <para>
             </para>
          </section>
	  <section><title>DOS</title>
             <para>
             </para>
          </section>
	  <section><title>Windows *</title>
             <para>
             </para>
          </section>
	  <section><title>[...]</title>
             <para>
             </para>
          </section>
</chapter>


</book>
